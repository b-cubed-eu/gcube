% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_spatial_pattern.R
\name{create_spatial_pattern}
\alias{create_spatial_pattern}
\title{Create spatial pattern within a polygon}
\usage{
create_spatial_pattern(
  polygon,
  resolution,
  spatial_pattern = c("random", "clustered"),
  seed = NA,
  n_sim = 1
)
}
\arguments{
\item{polygon}{An sf object with POLYGON geometry.}

\item{resolution}{A numeric value defining the resolution of the raster cell}

\item{spatial_pattern}{Define the spatial pattern. It could be a character
string \code{"random"} or \code{"clustered"}, in which \code{"random"} is the default.
The user is able to provide a numeric value >= 1 (1 is "random" and
10 is "clustered"). A larger number means a broader size of the clusters
area. See details.}

\item{seed}{The seed for random number generation to make results
reproducible. If \code{NA} (the default), no seed is used.}

\item{n_sim}{Number of simulations. Each simulation is a different layer in
the raster. Default 1.}
}
\value{
An object of class SpatRaster with a spatial pattern for the area of
the given polygon.
}
\description{
It creates a raster with a spatial pattern for the area of a polygon.
}
\details{
the \code{spatial_pattern} argument change the range parameter of the
spherical variogram model. \code{spatial_pattern = 1} means the range has
the same size of the grid cell, which is defined in \code{resolution}
argument. We use the function \code{\link[gstat:vgm]{gstat::vgm()}} to implement the
spherical variogram model
}
\examples{
# Load packages
library(sf)
library(ggplot2)
library(tidyterra)

# Create polygon
plgn <- st_polygon(list(cbind(c(5, 10, 8, 2, 3, 5), c(2, 1, 7, 9, 5, 2))))
ggplot() +
  geom_sf(data = plgn) +
  theme_minimal()

# Random spatial pattern
rs_pattern_random <- create_spatial_pattern(
  polygon = plgn,
  resolution = 0.1,
  spatial_pattern = "random",
  seed = 123)

ggplot() +
  geom_spatraster(data = rs_pattern_random) +
  scale_fill_continuous(type = "viridis") +
  theme_minimal()

## Clustered spatial pattern
rs_pattern_clustered <- create_spatial_pattern(
  polygon = plgn,
  resolution = 0.1,
  spatial_pattern = "clustered",
  seed = 123)

ggplot() +
  geom_spatraster(data = rs_pattern_clustered) +
  scale_fill_continuous(type = "viridis") +
  theme_minimal()

## User defined spatial pattern
# Small scale clustering
rs_pattern_small <- create_spatial_pattern(
  polygon = plgn,
  resolution = 0.1,
  spatial_pattern = 5,
  seed = 123)

ggplot() +
  geom_spatraster(data = rs_pattern_small) +
  scale_fill_continuous(type = "viridis") +
  theme_minimal()

# Medium scale clustering (= the built-in clustered pattern)
rs_pattern_medium <- create_spatial_pattern(
  polygon = plgn,
  resolution = 0.1,
  spatial_pattern = 10,
  seed = 123)

ggplot() +
  geom_spatraster(data = rs_pattern_medium) +
  scale_fill_continuous(type = "viridis") +
  theme_minimal()

# Large scale clustering
rs_pattern_large <- create_spatial_pattern(
  polygon = plgn,
  resolution = 0.1,
  spatial_pattern = 100,
  seed = 123)

ggplot() +
  geom_spatraster(data = rs_pattern_large) +
  scale_fill_continuous(type = "viridis") +
  theme_minimal()
}
\seealso{
\code{\link[gstat:vgm]{gstat::vgm()}} and its \code{range} argument

Other occurrence: 
\code{\link{sample_occurrences_from_raster}()},
\code{\link{simulate_random_walk}()},
\code{\link{simulate_timeseries}()}
}
\concept{occurrence}
